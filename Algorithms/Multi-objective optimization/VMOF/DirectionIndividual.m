classdef DirectionIndividual < handle
    properties(SetAccess = private)
        dec;        % Decision variables of the individual
        obj;        % Objective values of the individual
        con;        % Constraint values of the individual
        add;        % Additional properties of the individual
        ind;        % The actual individual generated by t
        dir;        % Direction of the step
    end
    methods
        %% Constructor
        function obj = DirectionIndividual(group_step, StepOptimizer, direction, addValues)
            
            if nargin > 0
                xPrimeVars = StepOptimizer.xPrime.dec;
                xPrimeSize = size(xPrimeVars,2);

                obj = DirectionIndividual;
                
                % Set the infeasible decision variables to boundary values
                group_step  = max(min(group_step,StepOptimizer.upper),StepOptimizer.lower);

                full_step = group_step(StepOptimizer.G);
                velocity = full_step .* direction;
                
                maxVal = StepOptimizer.xPrimeupper;
                minVal = StepOptimizer.xPrimelower;
                x = xPrimeVars;

                interval = xPrimeVars - minVal;
                x = minVal + velocity .* interval;
                interval = maxVal - xPrimeVars;
                x(velocity > 1.0) = xPrimeVars(velocity > 1.0) + (velocity(velocity > 1.0)-1.0) .* interval(velocity > 1.0);

                
                %do repair
                if x < minVal
                   x = minVal;
                elseif x > maxVal
                   x = maxVal;
                end

                obj.dec = group_step;
                obj.ind = SOLUTION(x);
                obj.obj = obj.ind.obj;
                obj.con = obj.ind.con;
            
            
                if nargin > 3
                    CallStack = dbstack();
                    Field     = CallStack(2).name;
                    obj.add.(Field) = addValues;
                end
            end
            
        end
        %% Get the matrix of decision variables of the population
        function value = decs(obj)
        %decs - Get the matrix of decision variables of the population
        %
        %   A = obj.decs returns the matrix of decision variables of the
        %   population obj, where obj is an array of INDIVIDUAL objects.
        
            value = cat(1,obj.dec);
        end
        %% Get the matrix of objective values of the population
        function value = objs(obj)
        %objs - Get the matrix of objective values of the population
        %
        %   A = obj.objs returns the matrix of objective values of the
        %   population obj, where obj is an array of INDIVIDUAL objects.
        
            value = cat(1,obj.obj);
        end
        %% Get the matrix of constraint values of the population
        function value = cons(obj)
        %cons - Get the matrix of constraint values of the population
        %
        %   A = obj.cons returns the matrix of constraint values of the
        %   population obj, where obj is an array of INDIVIDUAL objects.
        
            value = cat(1,obj.con);
        end
        %% Get the matrix of additional property of the population
        function value = adds(obj,addValue)
        %adds - Get the matrix of additional property values of the population
        %
        %   A = obj.adds(AddProper) returns the matrix of the values of the
        %   additional property of the INDIVIDUAL objects obj. The name of
        %   the additional property is same to the function name of the
        %   caller, that is, the values of one additional property of the
        %   individuals can only be obtained by the function which created
        %   them. If any individual in obj does not contain the specified
        %   additional property, assign it a default value specified in
        %   AddProper.
        
            CallStack = dbstack();
            Field     = CallStack(2).name;
            value     = zeros(length(obj),size(addValue,2));
            for i = 1 : length(obj)
                if ~isfield(obj(i).add,Field)
                    obj(i).add.(Field) = addValue(i,:);
                end
                value(i,:) = obj(i).add.(Field);
            end
        end
    end
end